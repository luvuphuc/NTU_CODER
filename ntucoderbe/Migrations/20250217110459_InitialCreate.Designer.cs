// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ntucoderbe.Models;

#nullable disable

namespace ntucoderbe.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250217110459_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ntucoderbe.Models.ERD.Account", b =>
                {
                    b.Property<int>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ReceiveEmail")
                        .HasColumnType("longtext")
                        .HasAnnotation("EmailAddress", true);

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("AccountID");

                    b.HasIndex("RoleID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Announcement", b =>
                {
                    b.Property<int>("AnnouncementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AnnounceContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("AnnounceTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ContestID")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementID");

                    b.HasIndex("ContestID");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Blog", b =>
                {
                    b.Property<int>("BlogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BlogDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PinHome")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("BlogID");

                    b.HasIndex("CoderID");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CatName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CatOrder")
                        .HasColumnType("int");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Coder", b =>
                {
                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CoderEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CoderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CoderID");

                    b.ToTable("Coders");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BlogID")
                        .HasColumnType("int");

                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CommentID");

                    b.HasIndex("BlogID");

                    b.HasIndex("CoderID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Compiler", b =>
                {
                    b.Property<int>("CompilerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CompilerExtension")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CompilerName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CompilerOption")
                        .HasColumnType("int");

                    b.Property<string>("CompilerPath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CompilerID");

                    b.ToTable("Compilers");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Contest", b =>
                {
                    b.Property<int>("ContestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<string>("ContestDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ContestName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("FailedPenalty")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("FrozenTime")
                        .HasColumnType("int");

                    b.Property<int>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("RankingFinished")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RuleType")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ContestID");

                    b.HasIndex("CoderID");

                    b.ToTable("Contest");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Favourite", b =>
                {
                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<int>("ProblemID")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CoderID", "ProblemID");

                    b.HasIndex("ProblemID");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.HasProblem", b =>
                {
                    b.Property<int>("HasProblemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ContestID")
                        .HasColumnType("int");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<int>("ProblemID")
                        .HasColumnType("int");

                    b.Property<int>("ProblemOrder")
                        .HasColumnType("int");

                    b.HasKey("HasProblemID");

                    b.HasIndex("ContestID");

                    b.HasIndex("ProblemID");

                    b.ToTable("HasProblems");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Participation", b =>
                {
                    b.Property<int>("ParticipationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<int>("ContestID")
                        .HasColumnType("int");

                    b.Property<int?>("PointScore")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("RegisterMAC")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegisterTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("SolvedCount")
                        .HasColumnType("int");

                    b.Property<int?>("TimeScore")
                        .HasColumnType("int");

                    b.HasKey("ParticipationID");

                    b.HasIndex("CoderID");

                    b.HasIndex("ContestID");

                    b.ToTable("Participations");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Problem", b =>
                {
                    b.Property<int>("ProblemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<int>("MemoryLimit")
                        .HasColumnType("int");

                    b.Property<string>("ProblemCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProblemContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProblemExplanation")
                        .HasColumnType("longtext");

                    b.Property<string>("ProblemName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Published")
                        .HasColumnType("int");

                    b.Property<string>("TestCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TestCompilerID")
                        .HasColumnType("int");

                    b.Property<string>("TestProgCompile")
                        .HasColumnType("longtext");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<float>("TimeLimit")
                        .HasColumnType("float");

                    b.HasKey("ProblemID");

                    b.HasIndex("CoderID");

                    b.HasIndex("TestCompilerID");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.ProblemCategory", b =>
                {
                    b.Property<int>("ProblemID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.HasKey("ProblemID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("ProblemCategories");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleID = 2,
                            Name = "User"
                        },
                        new
                        {
                            RoleID = 3,
                            Name = "Manager"
                        });
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Solved", b =>
                {
                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<int>("ProblemID")
                        .HasColumnType("int");

                    b.HasKey("CoderID", "ProblemID");

                    b.HasIndex("ProblemID");

                    b.ToTable("Solved");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Submission", b =>
                {
                    b.Property<int>("SubmissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CoderID")
                        .HasColumnType("int");

                    b.Property<int>("CompilerID")
                        .HasColumnType("int");

                    b.Property<string>("MaxMemorySize")
                        .HasColumnType("longtext");

                    b.Property<string>("MaxTimeDuration")
                        .HasColumnType("longtext");

                    b.Property<int>("ProblemID")
                        .HasColumnType("int");

                    b.Property<string>("SubmissionCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubmissionStatus")
                        .HasColumnType("int");

                    b.Property<int?>("SubmitLineCount")
                        .HasColumnType("int");

                    b.Property<string>("SubmitMinute")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SubmitTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TakePartID")
                        .HasColumnType("int");

                    b.Property<string>("TestResult")
                        .HasColumnType("longtext");

                    b.Property<int?>("TestRunCount")
                        .HasColumnType("int");

                    b.HasKey("SubmissionID");

                    b.HasIndex("CoderID");

                    b.HasIndex("CompilerID");

                    b.HasIndex("ProblemID");

                    b.HasIndex("TakePartID");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.TakePart", b =>
                {
                    b.Property<int>("TakePartID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("FrozenTimeSol")
                        .HasColumnType("int");

                    b.Property<int?>("MaxPoint")
                        .HasColumnType("int");

                    b.Property<int>("ParticipationID")
                        .HasColumnType("int");

                    b.Property<int?>("PointWon")
                        .HasColumnType("int");

                    b.Property<int>("ProblemID")
                        .HasColumnType("int");

                    b.Property<int?>("SubmissionCount")
                        .HasColumnType("int");

                    b.Property<int?>("TimeSolved")
                        .HasColumnType("int");

                    b.HasKey("TakePartID");

                    b.HasIndex("ParticipationID");

                    b.HasIndex("ProblemID");

                    b.ToTable("TakeParts");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.TestCase", b =>
                {
                    b.Property<int>("TestCaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PreTest")
                        .HasColumnType("longtext");

                    b.Property<int>("ProblemID")
                        .HasColumnType("int");

                    b.Property<string>("SampleTest")
                        .HasColumnType("longtext");

                    b.Property<int>("TestCaseOrder")
                        .HasColumnType("int");

                    b.HasKey("TestCaseID");

                    b.HasIndex("ProblemID");

                    b.ToTable("TestCases");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.TestRun", b =>
                {
                    b.Property<int>("TestRunID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CheckerLog")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MemorySize")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubmissionID")
                        .HasColumnType("int");

                    b.Property<int>("TestCaseID")
                        .HasColumnType("int");

                    b.Property<string>("TestOutput")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TimeDuration")
                        .HasColumnType("int");

                    b.HasKey("TestRunID");

                    b.HasIndex("SubmissionID");

                    b.HasIndex("TestCaseID");

                    b.ToTable("TestRuns");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Account", b =>
                {
                    b.HasOne("ntucoderbe.Models.ERD.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Announcement", b =>
                {
                    b.HasOne("ntucoderbe.Models.ERD.Contest", "Contest")
                        .WithMany("Announcements")
                        .HasForeignKey("ContestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Blog", b =>
                {
                    b.HasOne("ntucoderbe.Models.ERD.Coder", "Coder")
                        .WithMany("Blogs")
                        .HasForeignKey("CoderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coder");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Coder", b =>
                {
                    b.HasOne("ntucoderbe.Models.ERD.Account", "Account")
                        .WithOne("Coder")
                        .HasForeignKey("ntucoderbe.Models.ERD.Coder", "CoderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Comment", b =>
                {
                    b.HasOne("ntucoderbe.Models.ERD.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntucoderbe.Models.ERD.Coder", "Coder")
                        .WithMany("Comments")
                        .HasForeignKey("CoderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Coder");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Contest", b =>
                {
                    b.HasOne("ntucoderbe.Models.ERD.Coder", "Coder")
                        .WithMany("Contests")
                        .HasForeignKey("CoderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coder");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Favourite", b =>
                {
                    b.HasOne("ntucoderbe.Models.ERD.Coder", "Coder")
                        .WithMany("Favourites")
                        .HasForeignKey("CoderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ntucoderbe.Models.ERD.Problem", "Problem")
                        .WithMany("Favourites")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.HasProblem", b =>
                {
                    b.HasOne("ntucoderbe.Models.ERD.Contest", "Contest")
                        .WithMany("HasProblems")
                        .HasForeignKey("ContestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntucoderbe.Models.ERD.Problem", "Problem")
                        .WithMany("HasProblems")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contest");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Participation", b =>
                {
                    b.HasOne("ntucoderbe.Models.ERD.Coder", "Coder")
                        .WithMany("Participations")
                        .HasForeignKey("CoderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntucoderbe.Models.ERD.Contest", "Contest")
                        .WithMany("Participations")
                        .HasForeignKey("ContestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("Contest");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Problem", b =>
                {
                    b.HasOne("ntucoderbe.Models.ERD.Coder", "Coder")
                        .WithMany("Problems")
                        .HasForeignKey("CoderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntucoderbe.Models.ERD.Compiler", "Compiler")
                        .WithMany("Problems")
                        .HasForeignKey("TestCompilerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("Compiler");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.ProblemCategory", b =>
                {
                    b.HasOne("ntucoderbe.Models.ERD.Category", "Category")
                        .WithMany("ProblemCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntucoderbe.Models.ERD.Problem", "Problem")
                        .WithMany("ProblemCategories")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Solved", b =>
                {
                    b.HasOne("ntucoderbe.Models.ERD.Coder", "Coder")
                        .WithMany("Solveds")
                        .HasForeignKey("CoderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntucoderbe.Models.ERD.Problem", "Problem")
                        .WithMany("Solveds")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Submission", b =>
                {
                    b.HasOne("ntucoderbe.Models.ERD.Coder", "Coder")
                        .WithMany("Submissions")
                        .HasForeignKey("CoderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntucoderbe.Models.ERD.Compiler", "Compiler")
                        .WithMany("Submissions")
                        .HasForeignKey("CompilerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntucoderbe.Models.ERD.Problem", "Problem")
                        .WithMany("Submissions")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntucoderbe.Models.ERD.TakePart", "TakePart")
                        .WithMany("Submissions")
                        .HasForeignKey("TakePartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("Compiler");

                    b.Navigation("Problem");

                    b.Navigation("TakePart");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.TakePart", b =>
                {
                    b.HasOne("ntucoderbe.Models.ERD.Participation", "Participation")
                        .WithMany("TakeParts")
                        .HasForeignKey("ParticipationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntucoderbe.Models.ERD.Problem", "Problem")
                        .WithMany("TakeParts")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participation");

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.TestCase", b =>
                {
                    b.HasOne("ntucoderbe.Models.ERD.Problem", "Problem")
                        .WithMany("TestCases")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Problem");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.TestRun", b =>
                {
                    b.HasOne("ntucoderbe.Models.ERD.Submission", "Submission")
                        .WithMany("TestRuns")
                        .HasForeignKey("SubmissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ntucoderbe.Models.ERD.TestCase", "TestCase")
                        .WithMany("TestRuns")
                        .HasForeignKey("TestCaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submission");

                    b.Navigation("TestCase");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Account", b =>
                {
                    b.Navigation("Coder")
                        .IsRequired();
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Blog", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Category", b =>
                {
                    b.Navigation("ProblemCategories");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Coder", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("Contests");

                    b.Navigation("Favourites");

                    b.Navigation("Participations");

                    b.Navigation("Problems");

                    b.Navigation("Solveds");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Compiler", b =>
                {
                    b.Navigation("Problems");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Contest", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("HasProblems");

                    b.Navigation("Participations");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Participation", b =>
                {
                    b.Navigation("TakeParts");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Problem", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("HasProblems");

                    b.Navigation("ProblemCategories");

                    b.Navigation("Solveds");

                    b.Navigation("Submissions");

                    b.Navigation("TakeParts");

                    b.Navigation("TestCases");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.Submission", b =>
                {
                    b.Navigation("TestRuns");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.TakePart", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ntucoderbe.Models.ERD.TestCase", b =>
                {
                    b.Navigation("TestRuns");
                });
#pragma warning restore 612, 618
        }
    }
}
